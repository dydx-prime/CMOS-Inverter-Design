* Abstract/Overview

* Objectives, Specs, Design Goals
The objective of the project is to analyze the PMOS and NMOS for DC sweep, VTC (voltage transfer charcteristics), and . After that, the CMOS configuration of the inverted will be formed and analyzed for


* Simulation (Ngspice)

The NMOS and PMOS are first analyzed to understand how the current of the transistors behaves based on different inputs of Vds and Vgs. Utilizing ngspice, the following schematic is simulated for mutiple steps of voltages of Vds and Vgs. Within Ngspice, the command line is used to display and plot the necessary data calculated. The first DC sweep on Vgs (transfer characterisitcs) for multiple values of Vds is show in the plot below, where it can be seen that the threshold voltage is between 500mv and 650mv.

#+CAPTION: Figure 1.1
[[vgs_sweep.svg]]

To better match the ideal .7v threshold, the NMOS channel length is changed from .15 to .3[um], reducing short channel effects. Thus, the new plot as seen below, better resembles the textbook ideal NMOS. INSERT

#+CAPTION: Figure 1.2
[[vds_sweep.svg]]

----TODO: PMOS I-V curve----

** Voltage Transfer Characteristics

In essence, the voltage transfer characteristics of the inverter are tested to see how the output voltage V_out is affected for different inputs of V_in.

Before proceeding with VTC analysis, a quick symbol for the inverter (NOT) is created within xschem, and is utilized for the remainder of the project.

#+CAPTION: Figure 1.3 - Inverter in the form of CMOS
[[CMOS_NOT.png]]

#+CAPTION: Figure 1.4 - Inverter in the form of a gate
[[GATE_NOT.png]]

With a much improved format for testing the inverter, the VTC simulation is tested for a wide range of inputs between 0 and 2[V]. The plot of Figure 1.5 shows that the output is able to go from a high value, to a low value, the charctersisitcs that shape an inverter. 

#+CAPTION: Figure 1.5
[[vtc_1.svg]]

This proves the design to be correct, though it can be seen that the value where V_in and V_out are equal, is not .9[V]. The following command is used in Ngspice,

#+BEGIN_SRC spice
meas dc vm when vin=vout
#+END_SRC

where it can be seen that the V_m (midpoint voltage), is .83[V]. The midpoint voltage can be important in regards to noise margin, as it can dictate the maximum value a voltage can have to be considered a low, and a mininum value a voltage can have to be considered a high. Between these maximum and minimum points, is where the noise becomes prominent, that is, the inverter will not be able to set a clean or correct high/low value. This can be mitigated by widening the PMOS transistor, though increasing the width can lead to increased area in silicon area, as well as increased power consumption. For this project, the width of the PMOS is 2[um], and the NMOS is 1[um]. Table 1.1 Is used merely to show the values of V_m for different width's of the PMOS network.

#+CAPTION: Table 1.1 - Values of V_m for different PMOS width values
| WIDTH | V_m |
|-------+-----|
| 1[um] | .830[V] |
| 2[um] | .869[V] |
| 3[um] | .893[V] |

With the use of the 2[um] PMOS, the VTC of the inverter is as followed.

#+CAPTION: Figure 1.6
[[vtc.svg]]

** Noise Analysis

Signals tend to variate as they oscillate, so the noise margin is studied to measure what the range of input voltages are to be considered for a functional inverter. Thus, two variables are introduced, where V_IL is the maximum value a voltage can be for the signal to be considered a low (or 0), and V_IH is the minimum value a voltage can be for the signal to be considered a high (or 1).

Using the following Ngspice command

#+BEGIN_SRC spice_1
let gain = abs(deriv(vout)) >= 1
#+END_SRC

leads to the plot of figure 1.7, where it can be seen that signals between .7[V] and .9[V] lead to inoperable values for the inverter being built. With a small tweak to the previous command, both the VTC and Noise Margin plots can be compared.

#+CAPTION: Figure 1.7
[[gain.svg]]

This small tweak leads to Figure 1.8, where the intercepts of V_out and the gain (Noise Margin), are measured to define the values of V_IH and V_IL.

#+CAPTION: Figure 1.8
[[gain_vout.svg]]

Utilizing the following Ngspice commands, 

#+BEGIN_SRC spice_2
meas vil dc find vin when gain=1 cross=1
meas vih dc find vin when gain=1 cross=last
#+END_SRC

leads to the formation of Table 1.2 to provide the following calculations for V_IL and V_IH

#+CAPTION: Table 1.2 - Calculations for V_IL and V_IH
| V_IH | V_OH |
|-------+-----|
| .744[V] | .980[V] |


** Delay Analysis

* Layout (Magic)

* DRC, LVS, Verification

* Results/Discussions

* Conclusion

