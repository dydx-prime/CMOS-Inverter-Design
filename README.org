* Table of Contents
- [[#objective][Objective]]

- [[#simulation-ngspice][Simulation (Ngspice)]]
  -  [[#transistor-simulation][Transistor Simulation]]
  -  [[#voltage-transfer-characteristics-vtc][Voltage Transfer Charactersistics (VTC)]]
  -  [[#noise-analysis][Noise Analysis]]
  -  [[#delay-analysis][Delay Analysis]]
  -  [[#power-analysis][Power Analysis]]

- [[#design-specifications][Design Specifications]]

- [[#layout-design--drc-checks-magic][Layout Design & DRC Checks (Magic)]]

- [[#lvs--final-verification][LVS & Final Verification]]

- [[#conclusion][Conclusion]]

* Objective

The objective of the project is to analyze (Ngspice) the PMOS/NMOS isolated. A custom inverter is then formed, where the VTC (voltage transfer characteristics), Noise, Delay, and Power are analyzed. What follows is a layout design (Magic) that complies with the SKY130 PDK rules. The project concludes with LVS checks through Netgen and congruency checks with the simulations that contain the transistors from the schematic capture, and the layout design.

* Simulation (Ngspice)

** Transistor Simulation

The NMOS and PMOS are first analyzed to understand how the current of the transistors behaves based on different inputs of V_ds (voltage from drain to source) and V_gs (voltage from gate to source). Utilizing Ngspice, the isolated transistor is simulated for mutiple steps of voltages of V_ds and V_gs. Within Ngspice, the command line is used to display and plot the necessary data calculated. The DC sweep on V_gs (transfer characterisitcs) for multiple values of V_ds is show in the plot below, where it can be seen that the threshold voltage is between 500mv and 650mv.

#+CAPTION: Figure 1.1
[[images/vgs_sweep.svg]]

The figure below simply shows the IV characteristics (V_ds sweep) of the NMOS.

#+CAPTION: Figure 1.2
[[images/vds_sweep.svg]]

Similarly, the plot below shows the IV characteristics of the PMOS.

#+CAPTION: Figure
[[images/PMOS_IV.svg]]

** Voltage Transfer Characteristics (VTC)

In essence, the voltage transfer characteristics of the inverter are tested to see how the output voltage, V_out, is affected for different inputs of voltage, V_in.

Before proceeding with VTC analysis, a symbol for the inverter is created within Xschem, and is utilized for the remainder of the project.

#+CAPTION: Figure 1.3 - Inverter in the form of CMOS
[[images/CMOS_NOT.png]]

#+CAPTION: Figure 1.4 - Inverter in the form of a gate
[[images/GATE_NOT.png]]

With a much improved format for testing the inverter, the VTC simulation is tested for a wide range of inputs between 0 and 2[V]. The plot below shows that the output is able to go from a high value to a low value, matching the expectations of the inverter. 

#+CAPTION: Figure 1.5
[[images/vtc_1.svg]]

The CMOS design is sufficient to be used as an inverter, but further analysis shows that the point where V_in and V_out are equal is not at the .9[V] mark. Though it is not necessary to match .9[V], this can lead to better noise margins, leading to a more robust design. The following command is used in Ngspice,

#+BEGIN_SRC spice
meas dc vm when vin=vout
#+END_SRC

where it can be seen that the V_m (midpoint voltage), is .83[V]. The midpoint voltage can be important in regards to noise margin, as it can dictate the maximum value a voltage can have to be considered a low, and a mininum value a voltage can have to be considered a high. Between these maximum and minimum points, is where the noise is prominent, that is, the inverter will not be able to set a clean or correct high/low value. This can be mitigated by widening the PMOS transistor, though increasing the width can lead to increased area in silicon area, as well as increased power consumption. For this project, the width of the PMOS is 2[um], and the NMOS is 1[um]. The table below is used merely to show the values of V_m for different width's of the PMOS network.

#+CAPTION: Table 1.1 - Values of V_m for different PMOS width values
| PMOS Width | V_m |
|-------+-----|
| 1[um] | .830[V] |
| 2[um] | .869[V] |
| 3[um] | .893[V] |

With the use of the 2[um] PMOS, the VTC of the inverter is as followed.

#+CAPTION: Figure 1.6
[[images/vtc.svg]]

** Noise Analysis

Signals tend to variate as they oscillate, so the noise margin is studied to measure what the range of input voltages are to be considered for a functional inverter. Thus, two variables are introduced, where V_IL is the maximum value a voltage can be for the signal to be considered a low (or 0), and V_IH is the minimum value a voltage can be for the signal to be considered a high (or 1).

Using the following Ngspice command

#+BEGIN_SRC spice_1
let gain = abs(deriv(vout)) >= 1 
gain = gain*1.8
#+END_SRC

leads to the plot of figure 1.7, where it can be seen that signals between .7[V] and .9[V] lead to inoperable values for the inverter being built. Thus, both the VTC and Noise Margin plots can be compared.

#+CAPTION: Figure 1.7
[[images/gain.svg]]

This comparison leads to Figure 1.8, where the intercepts of V_out and the gain (Noise Margin), are measured to define the values of V_IH and V_IL.

#+CAPTION: Figure 1.8
[[images/gain_vout.svg]]

Utilizing the following Ngspice commands, 

#+BEGIN_SRC spice_2
meas vil dc find vin when gain=1 cross=1
meas vih dc find vin when gain=1 cross=last
#+END_SRC

leads to the formation of the table below to provide the following calculations for V_IL and V_IH

#+CAPTION: Table 1.2 - Calculations for V_IL and V_IH
| V_IL | V_OH |
|-------+-----|
| .744[V] | .980[V] | 

** Delay Analysis

Propagation delay is a fundamental topic within VLSI design that is used to determine speed, prevent glitches, and analyze timing behavior of a block based on context (input based on previous block). Two variables, t_PHL(propagation delay from high to low) and t_PLH(propagation delay from low to high) are calculated within a transient simulation from .02[ns] to 10[ns]. Figure 1.9 illustrates the behavior of the inverter, which shows that the transition points for V_in and V_out can vary.

#+CAPTION: Figure 1.9
[[images/trans_vout_vin.svg]]

With the following Ngspice commands,

#+BEGIN_SRC spice_3
meas tran vin50 when vin=.9 RISE=2
meas tran vout50 when vout=.9 FALL=2
let tpHL = vout50-vin50

meas tran vin50 when vin=.9 FALL=1
meas tran vout50 when vout=.9 RISE=1
let tpLH = vout50-vin50

print tpHL
print tpLH
#+END_SRC

the results for t_PHL and t_PLH are 24.88[ps] and 35.65[ps], respectively. These values are used to determine the time it takes V_in to affect V_out (for low and high inputs). Analysis for the time it takes for V_out to change during a transition can be reffered to as rise (t_r) and fall time (t_f). To calculate the rise and fall time, the following Ngspice commands are used,

#+BEGIN_SRC spice_4
meas tran t10 when vout=.18 RISE=1
meas tran t90 when vout=1.6 RISE=1
let tr=t90-t10

meas tran t10 when vout=.18 FALL=1
meas tran t90 when vout=1.6 FALL=1
let tf=t10-t90

print tr
print tf
#+END_SRC

where t_r and t_f are 53.82[ps] and 45.28[ps], respectivelly. Up until this point, the inverter has been isolated (independent of context), which is never seen in typical design. It's relevance is in the fact that some ways to reduce the rise and fall times of a design, is to:

- Increase the power (V_dd)

- Increase the size of the inverter (transistors)

- Decrease the load capacitance

With the inverter being isolated, the third method for reducing rise and fall times cannot be done. Thus, a capacitor can be added to the output of the inverter as shown in the figure below, to simulate load capacitance. Before testing the methods provided, it is important to know that there are tradeoffs to reducing delay (or creating fast speed designs), such as the increase of power consumption, the increase of silicon area, and possible lower noise margins.

#+CAPTION: Figure 1.10
[[images/inv_cap.png]]

The table below is formed to showcase the different values of rise and fall times based on changes in V_dd, V_in, PMOS/NMOS widths, and load capacitance. The purpose of this section is to prove that the increase to the power supply of the inverter, the decrease to the capacitance load, and the increase of the size of the transistors, will lead to faster speeds.

#+CAPTION: Table 1.3 - Summary of Tests
| V_DD/V_IN | C_LOAD | PMOS | NMOS | t_r | t_f |
|------+----|----+---|---+--|---+--|--+--|--+--|
| 1.8[V] | 0[pF] | 2[um] | 1[um] | 53.82[ps] | 45.28[ps] |
| 1.8[V] | 0[pF] | 4[um] | 2[um] | 53.19[ps] | 40.23[ps] |
| 1.4[V] | 0[pF] | 2[um] | 1[um] | 67.86[ps] | 47.23[ps] |
| 1.4[V] | 0.25[pF] | 2[um] | 1[um] | 220.00[ps] | 126.99[ps] |
| 1.0[V] | 0.50[pF] | 2[um] | 1[um] | 762.42[ps] | 375.19[ps] |

** Power Analysis

Recall the formula for average power,

[[https://quicklatex.com/cache3/f3/ql_ea65fd5b6fb7ab4e8abfedf5f80c65f3_l3.png]]

where the product of voltage and current are integrated from zero to the period of the signal. Then, the average power is found by dividing the previous result by the period of the signal. Because this formula is a function of time, this will be a pure transient simulation. 

Referring to the first figure below, it can be seen that for a period of 3.3[ns], the current flowing in the inverter is varying across the axis. Plotting the current and V_out together (the second figure below), it can be seen that the interval from 3.3[ns] to 6.6[ns] is the best interval to use for power calculations.

#+CAPTION: Figure 1.11
[[images/current_plot.svg]]

#+CAPTION: Figure 1.12
[[images/current_vout_plot.svg]]

There is little to no current being drawn in the inverter because of the capacitance load of zero. Current rises when the capacitance is charging, and since there is little influence of the capacitance, there is little current being used. This is a key concept to understand for low power design, but there are tradeoffs to having low power consumption, such as a reduction in performance.

Some ways to reduce power:

- Reduce the capacitance load
- Reduce transistor size
- In layout design: Reduce wire size since there will be an increase in resistance, which means less current, thus reducing capacitance

By utilizing the following ngspice commands:

#+BEGIN_SRC spice_5
meas tran curr_inte integ vdd#branch from=3.3e-09 to=6.6e-09
let power=curr_inte*1.8
let avg_power = power/3.3e-09
print avg_power
#+END_SRC

the average power, P_avg, is equal to -3.45[uW]. The negative sign suggests that the dirrection or sign convention is opposite, which can be disregarded in this case. The key point is that there is little power being drawn in the inverter, which is due to its low load capacitance.

* Design Specifications

The inverter has been tested for its I-V, VTC, Noise, Delay, and Power characteristics, where the final design specficiations for a V_dd and V_in of 1.8[V].

- PMOS: Width of 2 microns and length of .15 microns
- NMOS: Width of 1 micron and length of .15 microns
- Rise Time (t_r): 53.82[ps]
- Fall Time (t_f): 45.28[ps]
- Propagation Delay from High to Low (t_pHL): 24.88[ps]
- Propagation Delay from Low to High (t_pLH): 35.65[ps]
- Input Low Voltage (V_IL): .744[V]
- Input High Voltage (V_IH): .980[V]
- Average Power (Assuming zero load capacitance): -3.45[uW]

* Layout Design & DRC Checks (Magic)

By utilizing the SKY130 pdk and and the layout editor, Magic, the layout of the inverter is created with the constraints (or design rules) described by the pdk (proccess development kit). Thus, it is important to create a design that is valid for manufacturing, and is also valid for spice simulation. The figure below showcases the layers that are available for use, where different metals can be used for a multitude of devices. Many layers utilize vias, and different metals use a different ammount of space. Since the inverter is not deeply complex, the layers used will range from metal1, to the nwell and diffusion layers.

#+CAPTION: Figure 1.13
[[images/SKY130PDK.png]]

To launch an instantiation of Magic with the SKY130 pdk, the following command is used

#+BEGIN_SRC layout_1
magic -rcfile /usr/local/share/pdk/sky130A/libs.tech/magic/sky130A.magicrc
#+END_SRC

Before painting the layout, it is important to set the design rules or units that each square in the grid will represent. For this project, the design rules of 50[nm] by 50[nm] will allow for precise painting. Thus, the layout process begins with the PMOS transistor by painting the n-well big enough to contain the p-diffusion, polysilicon, local interconnect (li), local interconnect via, metal connection (mcon), and metal1. The p-diffusion is then painted within the n-well, as well as the polysilicon, which runs at the middle of the p-diffusion. By adding the local interconnects, the vias for the connection of the local interconnects and metal1 can be painted. For the PMOS, the metal1 layer represents the V_dd voltage supply of the inverter. The figure below shows a quick illustration of the layout design of the PMOS.

#+CAPTION: Figure --
[[images/PMOS_layout.png]]

What follows is designing the input and output portion of the inverter. The polysilicon in the middle is extended, where a local interconnect layer, as well as a via layer is placed, which connects with the right side of the design. Thus, the input and output are connected through the previously placed vias. The figure below showcases the creation of the input/output layers.

#+CAPTION: Figure --
[[images/IO_layout.png]]

Lastly, the NMOS is painted. Similarly to the PMOS, the polysilicon runs through the n-diffusion layer, where the local interconnects are placed on the sides, which have vias that connect the two. Then, the local interconnect will extend to the bottom, where the metal connections and metal1 one meet. Thus, the NMOS and the ground connection has been finalized. The diagram below illustrates the process.

#+CAPTION: Figure --
[[images/NMOS_layout.png]]

The table below showcases the final dimmensions of some of the layers utilized in the layout design of the inverter.

| Layer | Dimmensions |
|-------+-----|
| n-well | 3000[nm] x 3000[nm] |
| p-diffusion | 1150[nm] x 2000[nm] |
| n-diffusion | 1150[nm] x 1000[nm] |
| polysilicon | 150[nm] x 4400[nm] |

Though DRC checks haven't been mentioned explicitly, it must be noted that the design of the inverter results in zero DRC errors, making it a valid design for manufacturing.

The figure below showcases the final layout design.

#+CAPTION: Figure --
[[images/inverter_layou_design_full.png]]

* LVS & Final Verification

For layout versus schematic (LVS), Netgen is used to check the equivalency between the Xschem design, and the Magic design. The width, length, and the names of the nets for the transistors will be compared, among other factors, which will determine the success of LVS.

In magic, the following commands are used,

#+BEGIN_SRC magic_1
extract all
ext2spice layout.ext
#+END_SRC

where the extraction of the data is converted into a .spice file, which is then compared to the Xschem spice file. Thus, the following command,

#+BEGIN_SRC netgen_1
netgen -batch lvs layout.spice schematic_inv.spice ~/vlsi_/open_pdks/sky130/sky130A/libs.tech/netgen/sky130A_setup.tcl
#+END_SRC

initiates the LVS check using Netgen. The figure below showcases the results within the "comp.out" file created from the check.

#+CAPTION: Figure --
[[images/Netgen_Results.png]]

By utilizing the same netlist from spice, the transistors between the Xschem verision and the Magic version are swapped. The new spice snippet is shown below.

#+CAPTION: Figure --
[[images/New_Spice_Sim.png]]

The data below showcases the results that the layout design inverter provides by using the same simulation base used in the Xschem version of the inverter.

- PMOS: Width of 2 microns and length of .15 microns
- NMOS: Width of 1 micron and length of .15 microns
- Rise Time (t_r): 61.56[ps]
- Fall Time (t_f): 48.11[ps]
- Propagation Delay from High to Low (t_pHL): 28.66[ps]
- Propagation Delay from Low to High (t_pLH): 41.16[ps]
- Input Low Voltage (V_IL): .773[V]
- Input High Voltage (V_IH): .960[V]
- Average Power (Assuming zero load capacitance): -3.64[uW]

* Conclusion

A table is created below, which showcases the specifications from the schematic capture, the layout design, and the differences between the two.

| Inverter  | PMOS   | NMOS | t_r   | t_f       | t_pHL | t_LH | V_IL | V_IH | Average Power |
|------+----|----+---|---+--|---+---|--+--------|--+----|---+--|--+---|--+---|------+--------| 
| Xschem | 2[um]  | 1[um] | 53.82[um] | 45.28[ps] | 24.88[ps] | 35.65[ps] | 0.744[V] | 0.980[V] | -3.45[uW] |
| Magic    | 2[um]  | 1[um] | 61.56[ps] | 48.11[ps] | 28.66[ps] | 41.16[ps] | 0.773[V] | 0.960[V] | -3.64[uW] |
| Percent Difference | 0% | 0% | 13.42% | 6.06% | 14.12% | 14.35% | 3.82% | 2.06% | 5.36% |

There is a maximum of 15% difference between the data captured from Xschem and Magic. Though it may seem high, the differences are likely due to parasitics in the layout design. For the purpose of the project, this is good enough. Thus, it is concluded that the layout design of the inverter was successful. Future considerations would be to analyze parasitics and understand how they affect designs.

This is an important project to tackle in VLSI design, as it cements fundamental knowledge in MOSFETs, CMOS logic, schematic capturing, spice simulation, layout design with DRC/LVS checks, and further verification.

Future projects to consider would be to create more complex analog designs, or to look into workflows such as OpenLane/OpenRoad, as they streamline the digital design process from RTL to GDSII.

* Extras

The LVS pass and simulation results prove that the layout design and schematic design are a match. However, the figure below is placed to show the V_out vs V_in graph to further verify an inverter was made in the layout design.

#+CAPTION: Figure --
[[images/layout_inverter_IO_graph.svg]]

A .GDSII file can be extracted from Magic, which can be viewed with Klayout. Despite not analyzing the GDSII file, a copy (inverter.gds in the layout_design directory) is provided for those intrested in looking further into the manufacturing process within ASICS and VLSI design.


