* Abstract/Overview

* Objectives, Specs, Design Goals
The objective of the project is to analyze the PMOS and NMOS for DC sweep, VTC (voltage transfer charcteristics), and . After that, the CMOS configuration of the inverted will be formed and analyzed for

* Simulation (Ngspice)

The NMOS and PMOS are first analyzed to understand how the current of the transistors behaves based on different inputs of Vds and Vgs. Utilizing ngspice, the following schematic is simulated for mutiple steps of voltages of Vds and Vgs. Within Ngspice, the command line is used to display and plot the necessary data calculated. The first DC sweep on Vgs (transfer characterisitcs) for multiple values of Vds is show in the plot below, where it can be seen that the threshold voltage is between 500mv and 650mv.

#+CAPTION: Figure 1.1
[[images/vgs_sweep.svg]]

To better match the ideal .7v threshold, the NMOS channel length is changed from .15 to .3[um], reducing short channel effects. Thus, the new plot as seen below, better resembles the textbook ideal NMOS. INSERT

#+CAPTION: Figure 1.2
[[vds_sweep.svg]]

----TODO: PMOS I-V curve----

** Voltage Transfer Characteristics

In essence, the voltage transfer characteristics of the inverter are tested to see how the output voltage V_out is affected for different inputs of V_in.

Before proceeding with VTC analysis, a quick symbol for the inverter (NOT) is created within xschem, and is utilized for the remainder of the project.

#+CAPTION: Figure 1.3 - Inverter in the form of CMOS
[[CMOS_NOT.png]]

#+CAPTION: Figure 1.4 - Inverter in the form of a gate
[[GATE_NOT.png]]

With a much improved format for testing the inverter, the VTC simulation is tested for a wide range of inputs between 0 and 2[V]. The plot of Figure 1.5 shows that the output is able to go from a high value, to a low value, the charctersisitcs that shape an inverter. 

#+CAPTION: Figure 1.5
[[vtc_1.svg]]

This proves the design to be correct, though it can be seen that the value where V_in and V_out are equal, is not .9[V]. The following command is used in Ngspice,

#+BEGIN_SRC spice
meas dc vm when vin=vout
#+END_SRC

where it can be seen that the V_m (midpoint voltage), is .83[V]. The midpoint voltage can be important in regards to noise margin, as it can dictate the maximum value a voltage can have to be considered a low, and a mininum value a voltage can have to be considered a high. Between these maximum and minimum points, is where the noise becomes prominent, that is, the inverter will not be able to set a clean or correct high/low value. This can be mitigated by widening the PMOS transistor, though increasing the width can lead to increased area in silicon area, as well as increased power consumption. For this project, the width of the PMOS is 2[um], and the NMOS is 1[um]. Table 1.1 Is used merely to show the values of V_m for different width's of the PMOS network.

#+CAPTION: Table 1.1 - Values of V_m for different PMOS width values
| WIDTH | V_m |
|-------+-----|
| 1[um] | .830[V] |
| 2[um] | .869[V] |
| 3[um] | .893[V] |

With the use of the 2[um] PMOS, the VTC of the inverter is as followed.

#+CAPTION: Figure 1.6
[[vtc.svg]]

** Noise Analysis

Signals tend to variate as they oscillate, so the noise margin is studied to measure what the range of input voltages are to be considered for a functional inverter. Thus, two variables are introduced, where V_IL is the maximum value a voltage can be for the signal to be considered a low (or 0), and V_IH is the minimum value a voltage can be for the signal to be considered a high (or 1).

Using the following Ngspice command

#+BEGIN_SRC spice_1
let gain = abs(deriv(vout)) >= 1
#+END_SRC

leads to the plot of figure 1.7, where it can be seen that signals between .7[V] and .9[V] lead to inoperable values for the inverter being built. With a small tweak to the previous command, both the VTC and Noise Margin plots can be compared.

#+CAPTION: Figure 1.7
[[gain.svg]]

This small tweak leads to Figure 1.8, where the intercepts of V_out and the gain (Noise Margin), are measured to define the values of V_IH and V_IL.

#+CAPTION: Figure 1.8
[[gain_vout.svg]]

Utilizing the following Ngspice commands, 

#+BEGIN_SRC spice_2
meas vil dc find vin when gain=1 cross=1
meas vih dc find vin when gain=1 cross=last
#+END_SRC

leads to the formation of Table 1.2 to provide the following calculations for V_IL and V_IH

#+CAPTION: Table 1.2 - Calculations for V_IL and V_IH
| V_IL | V_OH |
|-------+-----|
| .744[V] | .980[V] |

** Delay Analysis

Propagation delay is a fundamental topic within VLSI design that is used to determine speed, prevent glitches, and analyze timing behavior of a block based on context (input based on previous block). Two variables, t_PHL(propagation delay from high to low) and t_PLH(propagation delay from low to high) are calculated within a transient simulation from .02[ns] to 10[ns]. Figure 1.9 illustrates the behavior of the inverter, which shows that the transition points for V_in and V_out can vary.

#+CAPTION: Figure 1.9
[[trans_vout_vin.svg]]


With the following Ngspice commands,

#+BEGIN_SRC spice_3
meas tran vin50 when vin=.9 RISE=2
meas tran vout50 when vout=.9 FALL=2
let tpHL = vout50-vin50

meas tran vin50 when vin=.9 FALL=1
meas tran vout50 when vout=.9 RISE=1
let tpLH = vout50-vin50

print tpHL
print tpLH
#+END_SRC

the results for t_PHL and t_PLH are 24.88[ps] and 35.65[ps], respectively. These values are used to determine the time it takes V_in to affect V_out (for low and high inputs). Analysis for the time it takes for V_out to change during a transition can be reffered to as rise(t_r) and fall time(t_f). To calculate the rise and fall time, the following Ngspice commands are used,

#+BEGIN_SRC spice_4
meas tran t10 when vout=.18 RISE=1
meas tran t90 when vout=1.6 RISE=1
let tr=t90-t10

meas tran t10 when vout=.18 FALL=1
meas tran t90 when vout=1.6 FALL=1
let tf=t10-t90

print tr
print tf
#+END_SRC

where tr and tf are 53.82[ps] and 45.28[ps], respectivelly. Up until this point, the inverter has been isolated(independent of context), which is never seen in typical design. It's relevance is in the fact that some ways to reduce the rise and fall times of a design, is to:

- Increase the power (V_dd)

- Increase the size of the inverter (transistors)

- Decrease the load capacitance

With the inverter being isolated, the third method for reducing rise and fall times cannot be done. Thus, a capacitor can be added to the output of the inverter as shown in figure 1.10, to simulate load capacitance. Before testing the methods provided, it is important to know that there are tradeoffs to reducing delay(or creating fast speed designs), such as the increase of power consumption, the increase of silicon area, and possible lower noise margins.

#+CAPTION: Figure 1.10
[[inv_cap.png]]

Table 1.3 is formed to showcase the different values of rise and fall times based on changes in V_dd, V_in, PMOS/NMOS widths, and load capacitance. The purpose of this section is to prove that the increase to the power supply of the inverter, the decrease to the capacitance load, and the increase of the size of the transistors, will lead to faster speeds.

#+CAPTION: Table 1.3 - Summary of Tests
| V_DD/V_IN | C_LOAD | PMOS | NMOS | t_r | t_f |
|------+----|----+---|---+--|---+--|--+--|--+--|
| 1.8[V] | 0[pF] | 2[um] | 1[um] | 53.82[ps] | 45.28[ps] |
| 1.8[V] | 0[pF] | 4[um] | 2[um] | 53.19[ps] | 40.23[ps] |
| 1.4[V] | 0[pF] | 2[um] | 1[um] | 67.86[ps] | 47.23[ps] |
| 1.4[V] | 0.25[pF] | 2[um] | 1[um] | 220.00[ps] | 126.99[ps] |
| 1.0[V] | 0.50[pF] | 2[um] | 1[um] | 762.42[ps] | 375.19[ps] |

** Power Analysis

Recall the formula for average power,

[[https://quicklatex.com/cache3/f3/ql_ea65fd5b6fb7ab4e8abfedf5f80c65f3_l3.png]]

where the product of voltage and current are integrated from zero to the period of the signal. Then, the average power is found by dividing the previous result by the period of the signal. Because this formula is a function of time, this will be a pure transient simulation. 

Referring to figure 1.11, it can be seen that for a period of 3.3[ns], the current flowing in the inverter is varying across the axis. Plotting the current and V_out together (figure 1.12), it can be seen that the interval from 3.3[ns] to 6.6[ns] is the best interval to use for power calculations.

#+CAPTION: Figure 1.11
[[current_plot.svg]]

#+CAPTION: Figure 1.12
[[current_vout_plot.svg]]

It is important to mention that there is little to no current being drawn in the inverter because of the capacitance load of zero. Current rises when the capacitance is charging, and since there is little influence of the capacitance, there is little current being used. This is a key concept to understand for low power design, but there are tradeoffs to having low power consumption, such as a reduction in performance.

Some ways to reduce power:

- Reduce the capacitance load
- Reduce Transistor Size
- In layout design: Reduce wire size since there will be an increase in resistance, which means less current, thus reducing capacitance

By utilizing the following ngspice commands:

#+BEGIN_SRC spice_5
meas tran curr_inte integ vdd#branch from=3.3e-09 to=6.6e-09
let power=curr_inte*1.8
let avg_power = power/3.3e-09
print avg_power
#+END_SRC

the average power, P_avg, is equal to -3.45[uW]. The negative sign suggests that the dirrection or sign convention is opposite, which can be disregarded in this case. The key point is that there is little power being drawn in the inverter, which is due to its low load capacitance.

** A Quick Recap

The inverter has been tested for its I-V, VTC, Noise, Delay, and Power characteristics, where the final design specficiations for a V_DD and V_IN of 1.8[V].

- PMOS: Width of 2 microns and length of .15 microns
- NMOS: Width of 1 micron and length of .15 microns
- Rise Time (t_r): 53.82[ps]
- Fall Time (t_f): 45.28[ps]
- Propagation Delay from High to Low (t_pHL): 24.88[ps]
- Propagation Delay from Low to High (t_pLH): 35.65[ps]
- Input Low Voltage (V_IL): .744[V]
- Input High Voltage (V_IH): .980[V]
- Power (Assuming zero load capacitance): -3.45[uW]

* Layout Design & DRC Checks (Magic)



* LVS & Final Verification


you'll have to use netgen for LVS checks

that should be all you need tbh

* Conclusion

final inverter specs

what you learned

the importance of the project in regards to your career

YOU'RE ALMOST DONE, FINISH IT NOW
